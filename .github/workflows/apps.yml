name: Build & Deploy Apps

on:
  push:
    branches:
      - master
    paths:
      - 'apps/**'

env:
  JAVA_VERSION: '17'
  AWS_REGION: 'eu-central-1'

jobs:
  build_it:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ format('{0}-{1}', github.workflow, github.job) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Build & test 'importer' with Gradle
        working-directory: apps/importer
        run: ./gradlew test

      - name: Generate test report for 'importer'
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Report 'importer'
          path: apps/importer/build/test-results/test/*.xml
          reporter: java-junit

      - name: Build & test 'documents-generator' with Gradle
        working-directory: apps/documents-generator
        env:
          GH_PACKAGE_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}
        run: ./gradlew build

      - name: Generate test report for 'documents-generator'
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Report 'documents-generator'
          path: apps/documents-generator/build/test-results/test/*.xml
          reporter: java-junit

      - name: Print SAM version
        run: sam --version

      - name: Build AWS stack with SAM
        run: sam build --template-file apps/aws-sam/template.yml

      - name: Deploy AWS stack with SAM
        run: sam deploy --config-file apps/aws-sam/samconfig.toml --parameter-overrides MonitoringRecipient=${{ secrets.MONITORING_RECIPIENT }} ContactName=${{ secrets.CONTACT_NAME }} ContactEmail=${{ secrets.CONTACT_EMAIL }}

      - name: Invoke ImportFunction with SAM
        run: >
          sam remote invoke --stack-name timesheetwizard ImportFunction -e '{"body": "{\"customerIds\": [\"1000\"], \"dateRangeType\": \"CUSTOM_YEAR\", \"dateRange\": \"2022\"}"}'

  release_it:
    runs-on: ubuntu-latest
    needs: build_it
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Retrieve current version number
        working-directory: apps
        run: ./gradlew printVersion

      - name: Update release
        working-directory: apps
        run: |
          ./gradlew releaseVersion

      - name: Push release tag
        working-directory: apps
        run: |
          git push --all
          git push --tags

      - name: Retrieve updated version number
        working-directory: apps
        run: ./gradlew printVersion

      - name: Create GitHub release
        working-directory: apps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(git describe --tags --abbrev=0)
          version=$(./gradlew -q printVersion)
          ./gradlew -q printChangeLog | gh release create $tag -t "$version" -F -
