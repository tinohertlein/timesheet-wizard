[versions]
kotlin = "2.1.0"
guava = "33.4.0-jre"
kotlin-logging = "3.0.5"
jackson-kotlin = "2.18.2"
mockk = "1.13.13"
mock-server = "5.15.0"
opencsv = "5.9"
poi = "5.3.0"
jasper = "7.0.1"
openpdf = "2.0.3"
spring-boot = "3.3.6"
azure = "1.16.1"
spring-cloud = "2023.0.4"
spring-cloud-aws = "3.2.0"
spring-cloud-azure = "5.18.0"
spring-dependency-management = "1.1.7"
spring-modulith = "1.3.1"
spring-thin = "1.0.31.RELEASE"
shadow = "8.1.1"
semver = "0.13.0"
logstash-encoder = "8.0"
javaagent = "0.7.0"
byte-buddy-agent = "1.15.11"

[libraries]
lombok = { module = "org.projectlombok:lombok" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
kotlin-logging = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlin-logging" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson-kotlin" }
opencsv = { module = "com.opencsv:opencsv", version.ref = "opencsv" }
poi = { module = "org.apache.poi:poi", version.ref = "poi" }
poi-ooxml = { module = "org.apache.poi:poi-ooxml", version.ref = "poi" }
jasperreports = { module = "net.sf.jasperreports:jasperreports", version.ref = "jasper" }
jasperreports-pdf = { module = "net.sf.jasperreports:jasperreports-pdf", version.ref = "jasper" }
jasperreports-jdt = { module = "net.sf.jasperreports:jasperreports-jdt", version.ref = "jasper" }
openpdf = { module = "com.github.librepdf:openpdf", version.ref = "openpdf" }
spring-starter = { module = "org.springframework.boot:spring-boot-starter" }
spring-modulith = { module = "org.springframework.modulith:spring-modulith-bom", version.ref = "spring-modulith" }
spring-modulith-starter-core = { module = "org.springframework.modulith:spring-modulith-starter-core" }
spring-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-cloud = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "spring-cloud" }
spring-cloud-function-context = { module = "org.springframework.cloud:spring-cloud-function-context" }

## AWS
spring-cloud-aws = { module = "io.awspring.cloud:spring-cloud-aws-dependencies", version.ref = "spring-cloud-aws" }
spring-cloud-function-adapter-aws = { module = "org.springframework.cloud:spring-cloud-function-adapter-aws" }
spring-cloud-aws-starter = { module = "io.awspring.cloud:spring-cloud-aws-starter" }
spring-cloud-aws-starter-s3 = { module = "io.awspring.cloud:spring-cloud-aws-starter-s3" }

## AZURE
spring-cloud-azure = { module = "com.azure.spring:spring-cloud-azure-dependencies", version.ref = "spring-cloud-azure" }
spring-cloud-function-adapter-azure = { module = "org.springframework.cloud:spring-cloud-function-adapter-azure" }
spring-cloud-azure-starter-storage = { module = "com.azure.spring:spring-cloud-azure-starter-storage-blob" }
logstash-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-encoder" }

## testing
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockserver-netty = { module = "org.mock-server:mockserver-netty", version.ref = "mock-server" }
mockserver-client = { module = "org.mock-server:mockserver-client-java", version.ref = "mock-server" }
spring-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-modulith-starter-test = { module = "org.springframework.modulith:spring-modulith-starter-test" }
kotlin-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit5" }
rest-assured = { module = "io.rest-assured:rest-assured" }
testcontainers-localstack = { module = "org.testcontainers:localstack" }
testcontainers-mockserver = { module = "org.testcontainers:mockserver" }
byte-buddy-agent = { module = "net.bytebuddy:byte-buddy-agent", version.ref = "byte-buddy-agent" }

[bundles]
export = ["opencsv", "poi", "poi-ooxml", "jasperreports", "jasperreports-pdf", "jasperreports-jdt", "openpdf"]
spring-web = ["spring-starter", "spring-starter-web"]
spring-cloud = ["spring-cloud-function-context"]
spring-cloud-aws = ["spring-cloud-function-adapter-aws", "spring-cloud-aws-starter", "spring-cloud-aws-starter-s3"]
spring-cloud-azure = ["spring-cloud-function-adapter-azure", "spring-cloud-azure-starter-storage", "logstash-encoder"]

## testing
testing = ["mockk", "mockserver-netty", "mockserver-client", "spring-starter-test", "kotlin-junit", "rest-assured", "testcontainers-localstack", "testcontainers-mockserver"]

[plugins]
kotlinjvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }
spring-thin = { id = "org.springframework.boot.experimental.thin-launcher", version.ref = "spring-thin" }
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }
semver = { id = "com.github.jmongard.git-semver-plugin", version.ref = "semver" }
azure = { id = "com.microsoft.azure.azurefunctions", version.ref = "azure" }
javaagent-test = { id = "com.ryandens.javaagent-test", version.ref = "javaagent" }